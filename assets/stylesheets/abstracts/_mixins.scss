/// Usage examples
/// http://www.sassmeister.com/gist/dc32d63765332e1817ad577c14b28ef5
///

/// Generate a namespaced class
///
/// @author Gabriele Romeo
///
/// @access public
///
/// @param {String} $class - A class name
/// @param {String} $prefix [$framework-name] - An optional prefix
/// @require $framework-name
///
/// @example scss - Usage
///
///  @include namespaced('myClass') {
///    color: red;
///  }
///
///
/// @example css - CSS output
///
///  .namespace_myClass {
///     color: red;
///  }
///
@mixin namespaced( $class, $prefix: $framework-name ) {
  .#{$prefix}_#{$class} {
    @content;
  }
}

/// @alias namespaced
@mixin nm( $class, $prefix: $framework-name ) {
  @include namespaced( $class, $prefix ) {
    @content;
  }
}

/// **************************** BEM ****************************
/// http://getbem.com/

///
/// Generate a BLOCK
///
/// @author Gabriele Romeo
///
/// @access public
///
/// @param {String} $blockName - The name of the block
/// @param {Boolean} $is-namespaced [true] - Prefix the class's name with
///                                          the namespace's name
/// @require The namespaced @mixin
///
/// @example scss - Usage
///
///  @include b('card') {
///    width: 100%;
///    height: 200px;
///  }
///
///  @include b('card', false) {
///    width: 100%;
///    height: 200px;
///  }
///
///
/// @example css - CSS output
///
///  .namespace_card {
///    width: 100%;
///    height: 200px;
///  }
///
///  .card {
///    width: 100%;
///    height: 200px;
///  }
///
@mixin b( $blockName, $is-namespaced: true ) {
  @if $is-namespaced == true {
    @include namespaced($blockName) {
      @content;
    }
  } @else {
    .#{$blockName} {
      @content;
    }
  }
}

/// Generate an Element
///
/// @author Gabriele Romeo
///
/// @access public
///
/// @param {String} $elementName - The element's name
///
/// @example scss - Usage
///
///  @include b('card') {
///    width: 100%;
///    height: 200px;
///
///    @include e('header') {
///      width: 50%;
///      color: blue;
///    }
///  }
///
///
/// @example css - CSS output
///
///  .namespace_card {
///    width: 100%;
///    height: 200px;
///  }
///  .namespace_card__header {
///      width: 50%;
///      color: blue;
///  }
///
@mixin e( $elementName ) {
  &__#{$elementName} {
    @content;
  }
}

/// Generate an Element
///
/// @author Gabriele Romeo
///
/// @access public
///
/// @param {String} $modifierName - The element's modifier
///
/// @example scss - Usage
///
///  @include b('card') {
///    width: 100%;
///    height: 200px;
///
///    @include m('light') {
///      opacity: .5;
///    }
///
///    @include e('header') {
///      width: 50%;
///      color: blue;
///
///       @include m('active') {
///         color: yello;
///       }
///    }
///  }
///
///
/// @example css - CSS output
///
///  .namespace_card {
///    width: 100%;
///    height: 200px;
///  }
///  .namespace_card--light {
///    opacity: .5;
///  }
///  .namespace_card__header {
///      width: 50%;
///      color: blue;
///  }
///  .namespace_card__header--active {
///      color: yello;
///  }
///
@mixin m( $modifierName ) {
  &--#{$modifierName} {
    @content;
  }
}


/// **************************** BEMIT ****************************
///
/// Bem with namespaces
/// https://csswizardry.com/2015/08/bemit-taking-the-bem-naming-convention-a-step-further/
///
/// Generate an Element with the BEMIT methodology
///
/// @author Gabriele Romeo
///
/// @access public
///
/// @param {String} $componentName - The name of the component
/// @param {String} $BEMIT-namespace - The name of a BEMIT namespace
/// @param {Boolean} $is-namespaced [true] - Prefix the class's name with
///                                          the namespace's name
///
///
/// @example scss - Usage
///
///  @include bit('card', 'c') {
///    width: 100%;
///    height: 200px;
///  }
///
///  @include bit('card', 'c', false) {
///    width: 100%;
///    height: 200px;
///  }
///
///
/// @example css - CSS output
///
///  .namespace_c-card {
///    width: 100%;
///    height: 200px;
///  }
///
///  .c-card {
///    width: 100%;
///    height: 200px;
///  }
///
@mixin bit( $componentName, $BEMIT-namespace, $is-namespaced ) {
  $componentName: '#{$BEMIT-namespace}-#{$componentName}';
  @if ($is-namespaced == true) {
    @include namespaced($componentName) {
      @content;
    }
  } @else {
    // Do not use the namespace
    .#{$componentName} {
      @content;
    }
  }
}

/// Generate a BEMIT Component
///
/// @author Gabriele Romeo
///
/// @access public
///
/// @param {String} $componentName - The component's name
/// @param {Boolean} $is-namespaced [true] - Prefix the class's name with
///                                          the namespace's name
///
/// @example scss - Usage
///
///  @include c('card') {
///    width: 100%;
///    height: 200px;
///  }
///
///  @include c('card', false) {
///    width: 100%;
///    height: 200px;
///  }
///
///
/// @example css - CSS output
///
///  .namespace_c-card {
///    width: 100%;
///    height: 200px;
///  }
///
///  .c-card {
///    width: 100%;
///    height: 200px;
///  }
///
@mixin c( $componentName, $is-namespaced: true ) {
  @include bit($componentName, 'c', $is-namespaced) {
    @content;
  }
}

/// Generate a BEMIT Object
///
/// @author Gabriele Romeo
///
/// @access public
///
/// @param {String} $componentName - The object's name
/// @param {Boolean} $is-namespaced [true] - Prefix the class's name with
///                                          the namespace's name
///
/// @example scss - Usage
///
///  @include o('media') {
///    font-size: 10;
///  }
///  @include o('media', false) {
///    font-size: 10;
///  }
///
///
/// @example css - CSS output
///
///  .namespace_o-media {
///    font-size: 10;
///  }
///
///  .o-media {
///    font-size: 10;
///  }
///
@mixin o( $objectName, $is-namespaced: true ) {
  @include bit($objectName, 'o', $is-namespaced) {
    @content;
  }
}

/// Generate a BEMIT Utility class
///
/// @author Gabriele Romeo
///
/// @access public
///
/// @param {String}  $utilityName - The utility's name
/// @param {Boolean} $is-namespaced [true] - Prefix the class's name with
///                                          the namespace's name
///
/// @example scss - Usage
///
///  @include o('util') {
///    clip: rect(10px, 10px, 10px, 10px);
///  }
///
///  @include o('util', false) {
///    clip: rect(10px, 10px, 10px, 10px);
///  }
///
///
/// @example css - CSS output
///
///  .namespace_u-util {
///    clip: rect(10px, 10px, 10px, 10px);
///  }
///
///  .u-util {
///    clip: rect(10px, 10px, 10px, 10px);
///  }
///
@mixin u( $utilityName, $is-namespaced: true ) {
  @include bit($utilityName, 'u', $is-namespaced) {
    @content;
  }
}
