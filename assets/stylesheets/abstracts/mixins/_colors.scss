

///
/// Generate helper classes for each color and variants within the
/// $framework-colors map
///
/// @link http://www.sassmeister.com/gist/08edd5072f77749bebca0081201de9a8
///
/// @author Gabriele Romeo
///
/// @access public
///
/// @param {String} $helperName - The name of the helper class
/// @param {String} $CSSproperty ['color'] - The CSS property you want to set
///
/// @require $framework-colors
///
/// @example scss - Usage
///
///  .namespace_myClass {
///     @include colorHelpers('bck', $CSSproperty: 'background-color');
///   }
///
///
/// @example css - CSS output
///
///  .namespace_myClass.h-bck__[color-key]--[color-variant] {
///    background-color: #######
///  }
///
///
/// @example scss - Usage
///
///  .namespace_myClass {
///     @include colorHelpers('txt', $CSSproperty: 'color');
///   }
///
///
/// @example css - CSS output
///
///  .namespace_myClass.h-txt__[color-key]--[color-variant] {
///    color: #######
///  }
///


@mixin colorHelpers( $helperName, $CSSproperty: 'color' ) {

  @each $color-key, $color-variants in $framework-colors {

    $base-color-value: map-get($color-variants, 'base');

    $base-selector: addParentSelector('.h-#{$helperName}__#{$color-key}');

    #{$base-selector} {
      #{$CSSproperty}: $base-color-value;
    }

    @each $color-variant, $color-variant-value in $color-variants {
      @if $color-variant != 'base' {

        $variant-selector: addParentSelector('.h-#{$helperName}__#{$color-key}--#{$color-variant}');

        #{$variant-selector} {
          #{$CSSproperty}: $color-variant-value;
        }
      }
    }
  }
}

///
/// Generate helper classes for the base colors and their variants contained
///  within the provided map
///
/// @link http://www.sassmeister.com/gist/08edd5072f77749bebca0081201de9a8
///
/// @author Gabriele Romeo
///
/// @access public
///
/// @param {String} $helperName - The name of the helper class
/// @param {String} $colorMap   - A map containing base colors and their variants
/// @param {String} $CSSproperty ['color'] - The CSS property you want to set
///
/// @require $framework-colors
///
/// @example scss - Usage
///
///  $component-txt-variants: (
///    'accent3': ('base', 'light', 'darken')
///  );
///
///  .namespace_myClass {
///     @include colorHelper('txt', $component-txt-variants);
///   }
///
/// @example css - CSS output
///
///  .namespace_myClass.h-txt__accent3 {
///    color: #######
///  }
///
///  .namespace_myClass.h-txt__accent3--light {
///    color: #######
///  }
///
///  .namespace_myClass.h-txt__accent3--darken {
///    color: #######
///  }
///
///  $component-bck-variants: (
///    'accent3': ('base', 'light', 'darken')
///  );
///
///  .namespace_myClass {
///     @include colorHelper('background', $component-bck-variants, $CSSproperty: 'background-color');
///   }
///
/// @example css - CSS output
///
///  .namespace_myClass.h-background__accent3 {
///    background-color: #######
///  }
///
///  .namespace_myClass.h-background__accent3--light {
///    background-color: #######
///  }
///
///  .namespace_myClass.h-background__accent3--darken {
///    background-color: #######
///  }

@mixin colorHelper( $helperName, $colorMap, $CSSproperty: 'color' ) {

  @each $color-key, $color-variants in $colorMap {

    @if map-has-key($framework-colors, $color-key) {
      $base-color-variants: map-get($framework-colors, $color-key);

      // Generate each variant (if valid)
      @each $variant in $color-variants {
        @if map-has-key($base-color-variants, $variant) {

          $selector: addParentSelector('.h-#{$helperName}__#{$color-key}--#{$variant}');

          #{$selector} {
            #{$CSSproperty}: map-get($base-color-variants, $variant);
          }
        }
      }

    }

  }
}

///
/// Generate helper classes for the base colors and their variants contained
/// within the provided map. By default, the helper's name is 'bck' and the
/// CSS property used is 'background-color'
///
/// @link http://www.sassmeister.com/gist/08edd5072f77749bebca0081201de9a8
///
/// @author Gabriele Romeo
///
/// @access public
///
/// @param {String} $helperName - The name of the helper class
/// @param {String} $colorMap   - An optional map containing base colors
///                               and their variants. If Null it generates all
///                               colors and variants contained inside $framework-colors
/// @param {String} $CSSproperty ['color'] - The CSS property you want to set
///
///
/// @example scss - Usage
///
///  $component-bck-variants: (
///    'accent3': ('base', 'light', 'darken')
///  );
///
///  .myComponent {
///    @include backgroundVariants($component-bck-variants);
///    width: 500px;
///    margin: 10px;
///  }
///
/// @example css - CSS output
///
///  .myComponent {
///    width: 500px;
///    margin: 10px;
///  }
///
///  .myComponent.h-bck__accent3 {
///    background-color: #######
///  }
///
///  .myComponent.h-bck__accent3--light {
///    background-color: #######
///  }
///
///  .myComponent.h-bck__accent3--darken {
///    background-color: #######
///  }
///


@mixin backgroundVariants( $colorMap: null ) {
  @if ( $colorMap == null ) {
    @include colorHelpers('bck', $CSSproperty: 'background-color');
  } @else {
      @include colorHelper('bck', $colorMap, $CSSproperty: 'background-color');
  }
}

///
/// Generate helper classes for the base colors and their variants contained
/// within the provided map. By default, the helper's name is 'txt' and the
/// CSS property used is 'color'
///
/// @link http://www.sassmeister.com/gist/08edd5072f77749bebca0081201de9a8
///
/// @author Gabriele Romeo
///
/// @access public
///
/// @param {String} $helperName - The name of the helper class
/// @param {String} $colorMap   - An optional map containing base colors
///                               and their variants. If Null it generates all
///                               colors and variants contained inside $framework-colors
/// @param {String} $CSSproperty ['background-color'] - The CSS property you want to set
///
///
/// @example scss - Usage
///
///  $component-txt-variants: (
///    'accent3': ('base', 'light', 'darken')
///  );
///
///  .myComponent {
///    @include textVariants($component-txt-variants);
///    width: 500px;
///    margin: 10px;
///  }
///
/// @example css - CSS output
///
///  .myComponent {
///    width: 500px;
///    margin: 10px;
///  }
///
///  .myComponent.h-txt__accent3 {
///    color: #######
///  }
///
///  .myComponent.h-txt__accent3--light {
///    color: #######
///  }
///
///  .myComponent.h-txt__accent3--darken {
///    color: #######
///  }
///

@mixin textVariants( $colorMap: null ) {
  @if ( $colorMap == null ) {
    @include colorHelpers('txt');
  } @else {
      @include colorHelper('txt', $colorMap);
  }
}
