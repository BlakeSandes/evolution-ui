// -----------------------------------------------------------------------------
//                            COLORS HELPERS
// -----------------------------------------------------------------------------

///
/// Get the hexadecimal color value (and its variations) from the su_ colors palette.
///
/// @param {String} $type    ['primary'] - A valid color type. (primary, secondary,
///                                        etc., see the variable $framework-colors)
/// @param {String} $variant ['base']    - A variant of the color type
/// @param {Number} $opacity [1]         - A number between 0 and 1 or a value
///                                        specified within the $framework-colors-opacity map
///
/// @require $framework-colors
/// @require $framework-colors-opacity
/// @return {HEX Value}
///

@function get-color( $type: 'primary', $variant: 'base', $opacity: 1 ) {

  $color: null;

  // Get the color spectrum
  $color-spectrum: map-get($framework-colors, $type);

  // Get the color variant
  @if $color-spectrum {
    $color: map-get($color-spectrum, $variant);
  }

  // Get the alpha setting
  $alpha: if(type-of($opacity) == 'number', $opacity, map-get($framework-colors-opacity, $opacity));

  // Set the alpha of the color
  @if $alpha {
    $color: rgba($color, $alpha);
  }

  @return $color;
}

///
/// Generate a black color with opacity
///
/// @param {Number} $opacity [1] - A value between 0 and 1
///

@function black($opacity: 1){
  @return rgba(0, 0, 0, $opacity);
}

///
/// Generate a white color with opacity
///
/// @param {Number} $opacity [1] - A value between 0 and 1
/// @return {Color}
///

@function white($opacity: 1){
  @return rgba(255, 255, 255, $opacity);
}
